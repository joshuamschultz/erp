<%= simple_form_for(@payment, :html => {:id => "form_for_payments",:class => "form-horizontal"}) do |f| %>
<%= f.error_notification %>  

  <div class="form-inputs">
    <div class="row-fluid">
      <div class="span4 well item_detail_view">
        <div id="payment_vendor_info"></div>
      </div>

      <div class="span8 well item_detail_view">
        <% unless @payment.new_record? %>
            <%= f.input :organization_id, :disabled => true, input_html: { class: 'special_font' }, :label => "Vendor" if @payment.organization.present? %>
        <% else %>
            <%= f.association :organization, :url => autocomplete_organization_organization_name_organizations_path(type: "vendor"), :as => :autocomplete, :id_element => '#organization_id', :label => "Vendor" %>
        <% end %>

        <%= hidden_field_tag :organization_id, (@payment.organization.id if @payment.organization) %>

        <%= hidden_field_tag :org_organization_id, (@payment.organization.id if @payment.organization) %>

        <%= f.association :payment_type, :label => "Payment Type", :label_method => "type_name", :label_value => "id", :include_blank => false, :label => "Type", as: :radio_buttons, :input_html => {class: "payment_type_option"}, :checked => (MasterType.payment_types.second.id if @payment.payment_type.nil?) %>
       
        
        <%#= f.input :payment_check_amount, :label => "Amount" %>
        <%= f.input :payment_description, :label => "Description" %>
        <%= f.input :payment_notes, :label => "Notes" %>
      </div>
    </div>

    <div class="separator bottom"></div>

    <%# payment_lines = @payment.new_record? || (@payment.persisted? && @payment.payment_lines.empty?) ? [PaymentLine.new]*0 : @payment.payment_lines %>

    <%# payable_collection = @payment.new_record? ? [] : @payment.organization.payables %>

    <% payment_lines = (@payment.present? && @payment.payment_lines.any?) ? @payment.payment_lines : [PaymentLine.new]*0 %>

    <% payable_collection = (@payment.present? && @payment.organization.present?) ? @payment.organization.payables : [] %>

    <table id="payment_lines_table" class="data_lines_table dynamicTable table table-striped table-bordered table-condensed">
        <thead>
            <tr>
                <th>Payable No</th>
                <th>Date</th>
                <th>Due Date</th>
                <th>Total</th>
                <th>Balance</th>
                <th>Amount</th>
                <th></th>
            </tr>
        </thead>
        <tbody id="payment_lines_table_body">
            <%= f.fields_for :payment_lines, payment_lines do |payment_line| %>
                <tr>
                    <td><%= payment_line.association :payable, label: false, label_method: :payable_identifier, label_value: :id, :include_blank => false, collection: payable_collection, input_html: { class: (@payment.new_record? ? "payment_payable_new" : "payment_payable_edit") } %></td>
                    <td><%= text_field_tag :invoice_date, "", :disabled => true %></td>
                    <td><%= text_field_tag :invoice_due_date, "", :disabled => true %></td>
                    <td><%= text_field_tag :invoice_amount, "", :disabled => true %></td>
                    <td><%= text_field_tag :invoice_balance, "", :disabled => true %></td>
                    <td><%= payment_line.input :payment_line_amount, label: false, :input_html => {class: "payment_payable_amount"} %></td>
                    <td><a href='#' class='btn-action glyphicons remove_2 btn-danger', onclick='$(this).parent().parent().remove(); return false' ><i></i></a></td>
                </tr>
            <% end %>
        </tbody>
    </table>
  </div>

<div class="separator bottom"></div>
<div class="separator bottom"></div>

  <div class="form-actions">
    <%= f.button :submit, :class => "btn" %>
    <%= link_to 'Add Row', "#", :class => "btn", :onclick => "add_payment_line_row(); return false" %>
    <%= link_to 'Delete', payment_path(@payment), method: :delete, data: { confirm: 'Are you sure?' }, :class => "btn" unless @payment.new_record? %>
    <%= link_to 'Back to Payments', payments_path, :class => "btn" %>
  </div>
<% end %>


<script type="text/javascript">
    tab_field_forms["form_for_payments"] = [];

    var payable_select_html = "";

    var payment_fine_to_submit = true;

    $(document).ready(function(){
        if (!$("input:radio[name='payment[payment_check_code_type]']").is(":checked")) {
            $('.check_code_type_rad:first').attr('checked', true);
        }    
        $("#payment_payment_check_code").attr('readonly', 'readonly'); 
        $("#payment_organization_id").on("focusout", function(){

            if($("#organization_id").val() == ""){
                $("#organization_id").val($("#org_organization_id").val());
            }

            if($("#organization_id").val() != ""){
                initialize_api_call({"url": "/organizations/" + $("#organization_id").val() + "/organization_info", "type": "GET", "params": {}}, "set_vendor_info", {});

                initialize_api_call({"url": "/common_actions/get_info", "type": "GET", "data_type": "json", "params": {"mode": "organization_payables", "id": $("#organization_id").val()}}, "set_payment_payables", {});

                set_all_payment_payable_info("all");
            }
            else{
                $("#payment_vendor_info").html("");
                $(".payment_payable_new").html("");
                $("#payment_lines_table_body").html("");
                payable_select_html = "";
            }
        });

        <% unless @payment.nil? %>
            $("#payment_organization_id").val("<%= @payment.organization.organization_name if @payment.organization %>");

            if($("#organization_id").val() != ""){
                initialize_api_call({"url": "/organizations/" + $("#organization_id").val() + "/organization_info", "type": "GET", "params": {}}, "set_vendor_info", {});

                initialize_api_call({"url": "/common_actions/get_info", "type": "GET", "data_type": "json", "params": {"mode": "organization_payables", "id": $("#organization_id").val()}}, "set_payment_payables", {});
            }

            <% unless @payment.persisted? %>
                $("#payment_payment_check_code").val("<%=CheckCode.find_by_counter_type('check_code').counter%>");
                // $("#payment_check_entry_attributes_check_code").val("<%#= CheckEntry.get_next_check_code %>");
            <% end %>
        <% end %>

        $(".payment_type_option").on("change", function(){
            payment_type_changed($('.payment_type_option:checked').parent().text(), true);
        });

        $(".payment_type_option").on("keydown", function(){
            payment_type_changed($('.payment_type_option:checked').parent().text(), true);
            return false;
        });

         $(".check_code_type_rad").on("change", function(){
            if($('.check_code_type_rad:checked').val() == 'Automatic')
            {
                
                $("#payment_payment_check_code").attr('readonly', 'readonly');
            }
           if($('.check_code_type_rad:checked').val() == 'Manual')
            {
                             
                $("#payment_payment_check_code").removeAttr('readonly');
            }
        });    

        payment_type_changed($('.payment_type_option:checked').parent().text(), false);

        // $("#payment_organization_id").focus();

        $(document).on("change", ".payment_payable_edit", function(){
            call_payment_payable_info($(this));
        });

        $(document).on("change", ".payment_payable_new", function(){
            call_payment_payable_info($(this));
        });

        // $(document).on("keydown", "#payment_check_entry_attributes_check_code", function(e){
        //     var keyCode = e.keyCode || e.which;
        //     if(keyCode == 13){
        //         e.preventDefault();
        //         $('#payment_payment_description').focus();
        //     }
        // });  

        $(document).on("keydown", "#payment_payment_check_code", function(e){
            var keyCode = e.keyCode || e.which;
            if(keyCode == 13){
                e.preventDefault();
                $('#payment_payment_description').focus();
            }
        });

        $("#form_for_payments").submit(function(e){
            if(payment_fine_to_submit == false)
                e.preventDefault();
            else
                payment_fine_to_submit = true;
        });

        $(document).on("keydown", ".payment_payable_edit", function(e){
            payment_fine_to_submit = true;
            payment_fine_to_submit = table_row_next_focus(e, "#form_for_payments", $(this), ".payment_payable_amount", false);
        });

        $(document).on("keydown", ".payment_payable_new", function(e){
            payment_fine_to_submit = true;
            payment_fine_to_submit = table_row_next_focus(e, "#form_for_payments", $(this), ".payment_payable_amount", false);
        });

        $(document).on("keydown", ".payment_payable_amount", function(e){
            payment_fine_to_submit = true;
            payment_fine_to_submit = table_row_next_focus(e, "#form_for_payments", $(this), ".payment_payable_edit", true);
        });

        set_all_payment_payable_info("all");

        <% if @payable %>
            add_payment_line_row();
            $("#payment_lines_table_body").hide();
            setTimeout(function(){
                $('#payment_payment_lines_attributes_0_payment_line_amount').attr('readonly', true);                
                $("#payment_payment_lines_attributes_0_payable_id").val("<%= @payable.id %>");
                call_payment_payable_info($("#payment_payment_lines_attributes_0_payable_id"));
                $("#payment_lines_table_body").show();
                $("#payment_payment_description").focus();
            },2000);
        <% end %>

        // $(document).on("change", ".payment_check_mode", function(){
            // if($(".payment_check_mode:checked").val() == "automatic"){
                // $("#payment_check_entry_attributes_check_code").val("<%#= CheckEntry.get_next_check_code %>");
            // }
            // else
                // $("#payment_check_entry_attributes_check_code").val("<%#= @payment.check_entry.check_code if @payment.check_entry %>");

            // $("#payment_check_entry_attributes_check_code").focus();
        // });
    });

    function set_vendor_info(response, callback_params, api_params){
        $("#payment_vendor_info").html(response);
        return false;
    }

    function set_payment_payables(response, callback_params, api_params){
        payable_select_html = $.trim(Mustache.render($(".payable-select-box-template").html(), response));
        $(".payment_payable_new").html(payable_select_html);
        set_all_payment_payable_info("new");
        var vendor_payable_info="<h4><strong>All open payables of the vendor</strong></h4><table id='vendor_payable_info_table' class='dynamicTable table table-striped table-bordered table-condensed dataTable'><thead><tr><th>Payable No</th><th>Date</th><th>Due Date</th><th>Total</th></tr></thead><tbody id='payment_lines_table_body'>";

        $.each(response.aaData, function(){
            if(this.payable_status == "open"){
                vendor_payable_info += "<tr><td>"+this.payable_identifier+"</td><td>"+this.payable_invoice_date+"</td><td>"+this.payable_due_date+"</td><td>"+this.payable_total+"</td></tr>";
            }                     
        });
        vendor_payable_info +="</tbody></table>";
        $("#vendor_payable_info").html(vendor_payable_info);
        $("#vendor_payable_info").show(); 

    }

    function add_payment_line_row(){
        var payment_line_row_count = $(".payment_payable_new").length + $(".payment_payable_edit").length;
        var html = $.trim(Mustache.render($(".payment-line-row-html-template").html(), {"row_count" : payment_line_row_count, "row_data" : payable_select_html}));
        $("#payment_lines_table_body").append(html);
        $("#payment_payment_lines_attributes_"+payment_line_row_count+"_payable_id").html(payable_select_html);
        call_payment_payable_info($(".payment_payable_new").last());
    }

    function delete_payment_line_row(payment_line_id){
      <% if @payment.persisted? %>
          initialize_api_call({"url": "/payments/<%= @payment.id %>/payment_lines/"+ payment_line_id, "type": "DELETE", "data_type": "json", "params": {}}, "", {});
      <% end %>
    }    

    function call_payment_payable_info(selected_payable){
        if(selected_payable.val() != "" && selected_payable.val() != null)
            initialize_api_call({"url": "/common_actions/get_info", "type": "GET", "data_type": "json", "params": {"mode": "payment_payable_info", "id": selected_payable.val()}}, "set_payment_payable_info", {"object" : selected_payable});
    }

    function set_payment_payable_info(response, callback_params, api_params){
        callback_params["object"].closest("tr").find("#invoice_date").val(response.aaData.payable_invoice_date);
        callback_params["object"].closest("tr").find("#invoice_due_date").val(response.aaData.payable_due_date);
        callback_params["object"].closest("tr").find("#invoice_amount").val(response.aaData.payable_total);
        callback_params["object"].closest("tr").find("#invoice_balance").val(response.aaData.payable_balance);  
        callback_params["object"].closest("tr").find(".payment_payable_amount").val(response.aaData.payable_balance);
        callback_params["object"].closest("tr").find(".payment_payable_amount").focus();
    }

    function set_all_payment_payable_info(type){
        if(type == "edit" || type == "all"){
            $(".payment_payable_edit").each(function(index){
                call_payment_payable_info($(this));
            });
        }

        if(type == "new" || type == "all"){
            $(".payment_payable_new").each(function(index){
                call_payment_payable_info($(this));
            });
        }
    }

    function payment_type_changed(payment_type, change_focus){        
        if(payment_type == "Check"){
            $('#payment_check_div').show();
            if(change_focus)
                $('#payment_payment_check_code').focus();
            tab_field_forms["form_for_payments"] = ["payment_organization_id", "payment_payment_check_code", "payment_next_check_code","payment_payment_description", "payment_payment_notes", "payment_payment_lines_attributes_0_payable_id"];

            //     $('#payment_check_entry_attributes_check_code').focus();
            // tab_field_forms["form_for_payments"] = ["payment_organization_id", "payment_check_entry_attributes_check_code", "payment_payment_description", "payment_payment_notes", "payment_payment_lines_attributes_0_payable_id"];
        }
        else{
            $('#payment_check_div').hide();
            if(change_focus)
                $('#payment_payment_description').focus();
            tab_field_forms["form_for_payments"] = ["payment_organization_id", "payment_payment_description", "payment_payment_notes", "payment_payment_lines_attributes_0_payable_id"];
        }
    }


</script>

<%= render :partial => 'layouts/app_layouts/mustache_templates', locals: {type: "payable-select-box"} %>
<%= render :partial => 'layouts/app_layouts/mustache_templates', locals: {type: "payment-line-row-html"} %>
<div class="separator bottom"></div>
<div id="vendor_payable_info" style="display:none;"></div>
